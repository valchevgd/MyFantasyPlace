<?php

namespace MyFantasyPlaceBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use MyFantasyPlaceBundle\Entity\User;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(User::class));
    }

    /**
     * @param User $user
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function createUser(User $user)
    {
        $this->_em->persist($user);
        $this->_em->flush();

        return true;
    }

    /**
     * @param User $user
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function updateUser(User $user)
    {
        $this->_em->merge($user);
        $this->_em->flush();

        return true;
    }

    /**
     * @param string $typeOfPointsToReset
     * @param string $typeOfTransfer
     * @return bool
     */
    public function restartUsersForTournament(string $typeOfPointsToReset, string $typeOfTransfer)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->update('MyFantasyPlaceBundle:User', 'u')
            ->set($typeOfPointsToReset, '0')
            ->set($typeOfTransfer, 'true')
            ->getQuery();

        $qb->getQuery()->execute();

        return true;
    }

    /**
     * @param $typeOfPointsToReset
     * @return bool
     */
    public function restartUsersForSeason($typeOfPointsToReset)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->update('MyFantasyPlaceBundle:User', 'u')
            ->set($typeOfPointsToReset, '0')
            ->getQuery();

        $qb->getQuery()->execute();

        return true;
    }

    /**
     * @param $user
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function removeUser($user)
    {
        $this->_em->remove($user);
        $this->_em->flush();

        return true;
    }

}

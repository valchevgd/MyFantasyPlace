<?php

namespace MyFantasyPlaceBundle\Repository;

use Doctrine\ORM\EntityManagerInterface;
use Doctrine\ORM\Mapping;
use MyFantasyPlaceBundle\DTO\PlayerToViewDTO;
use MyFantasyPlaceBundle\Entity\UserSnookerPlayer;

/**
 * UserSnookerPlayerRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserSnookerPlayerRepository extends \Doctrine\ORM\EntityRepository
{
    public function __construct(EntityManagerInterface $em)
    {
        parent::__construct($em, new Mapping\ClassMetadata(UserSnookerPlayer::class));
    }

    /**
     * @param UserSnookerPlayer $transfer
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function insert(UserSnookerPlayer $transfer)
    {
        $this->_em->persist($transfer);
        $this->_em->flush();

        return true;
    }

    /**
     * @param $id
     * @return PlayerToViewDTO[]
     */
    public function findPlayersToView($id)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('sp.id', 'sp.name', 'sp.value', 'sp.seasonFantasyPoints', 'usp.level', 'usp.progress', 'usp.value - usp.progress as nextLevelValue')
            ->from('MyFantasyPlaceBundle:UserSnookerPlayer','usp')
            ->innerJoin('usp.playerId', 'sp')
            ->where('usp.userId = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $qb->getQuery()->execute();
    }

    /**
     * @param UserSnookerPlayer $relation
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function update(UserSnookerPlayer $relation){

        $this->_em->persist($relation);
        $this->_em->flush();

        return true;
    }

    /**
     * @param $userId
     * @param $playerId
     * @return PlayerToViewDTO
     * @throws \Doctrine\ORM\NoResultException
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findPlayerToView($userId, $playerId)
    {
        $qb = $this->_em->createQueryBuilder();

         $qb->select('sp.id', 'sp.name', 'sp.value', 'sp.seasonFantasyPoints', 'usp.level', 'usp.progress', 'usp.value - usp.progress as nextLevelValue')
            ->from('MyFantasyPlaceBundle:UserSnookerPlayer','usp')
            ->innerJoin('usp.playerId', 'sp')
            ->where('usp.userId = :userId and usp.playerId = :playerId')
            ->setParameter('userId', $userId)
            ->setParameter('playerId', $playerId)
            ->setMaxResults(1)
            ->getQuery();

         return $qb->getQuery()->getSingleResult();

    }

    /**
     * @param $relation
     * @return bool
     * @throws \Doctrine\ORM\OptimisticLockException
     */
    public function delete($relation)
    {
        $this->_em->remove($relation);
        $this->_em->flush();

        return true;
    }

    /**
     * @param $id
     * @return array
     */
    public function findUsers($id)
    {
        $qb = $this->_em->createQueryBuilder();

        $qb->select('u.id', 'usp.level')
            ->from('MyFantasyPlaceBundle:UserSnookerPlayer','usp')
            ->innerJoin('usp.userId', 'u')
            ->where('usp.playerId = :id')
            ->setParameter('id', $id)
            ->getQuery();

        return $qb->getQuery()->execute();
    }
}
